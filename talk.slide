Logging approaches: pros and cons (Open discussion)


Anastasiia Skliar

and community 

* 
.image images/programming-without-logs.jpeg


* Items to discuss

- Some common sence rules
- Approaches
- Existing libraries
- What should be in logs
- Discussion


* Some common sence rules
- Know your audiences (people or machines)
- Have a consistent structure across all logs
- Use log severity levels
- Always provide context
- Log a lot and then log some more


* Approaches
- Global State Logging
- Introducing Logger interface
- Passing in context.Context
- Logger injected as a dependency


* Global State Logging
.play code/global.go


* Introducing Logger interface

To address concerns with global logger, in all other approaches we'll be using a Logger interface:

    type Logger interface {
        Debug(args ...interface{})
        Debugf(format string, args ...interface{})
    }

*
Sample implementation using built-in Go's logger:

    type BuiltinLogger struct {
        logger *log.Logger
    }

    func NewBuiltinLogger() *BuiltinLogger {
        return &BuiltinLogger{logger: log.New(os.Stdout, "", 5)}
    }

    func (l *BuiltinLogger) Debug(args ...interface{}) {
        l.logger.Println(args...)
    }

    func (l *BuiltinLogger) Debugf(format string, args ...interface{}) {
        l.logger.Printf(format, args...)
    }
    
*    
Usage:

    var logger Logger = NewBuiltinLogger()

    func main() {
        logger.Debugf("Hello with %s", "formatting")
    } 

* Passing in context.Context

    func DoStuff(ctx context.Context) {
        log := ctx.Value("logger").(Logger)
        log.Debugf("Hello with %s", "formatting")
    }

    func main() {
        ctx := context.WithValue(context.Background(), "logger", NewBuiltinLogger())
        DoStuff(ctx)
    }

Passing loggers inside context.Context would be the worst solution to the problem of decoupling loggers from implementations. We ºd have gone from an explicit compile time dependency to an implicit run time dependency, one that could not be enforced by the compiler.

[[https://dave.cheney.net/2017/01/26/context-is-for-cancelation][Why Golang's context should not be used for storing loggers]] Dave Cheney

* Existing libraries
- [[https://github.com/sirupsen/logrus][sirupsen/logrus]] - Structured, pluggable logging for Go.
- [[https://github.com/uber-go/zap][uber-go/zap]] - Blazing fast, structured, leveled logging in Go.
- [[https://github.com/golang/glog][golang/glog]] - Leveled execution logs for Go
- [[https://github.com/natefinch/lumberjack][natefinch/lumberjack]] - lumberjack is a log rolling package for Go
- [[https://github.com/op/go-logging][op/go-logging]] - Golang logging library
- [[https://github.com/cihub/seelog][cihub/seelog]] - Seelog is a native Go logging library that provides flexible asynchronous dispatching, filtering, and formatting.
- [[https://github.com/inconshreveable/log15][inconshreveable/log15]] - Structured, composable logging for Go
- [[https://github.com/apex/log][apex/log]] - Structured logging package for Go.


* What should be in logs

- Requests (service or API access, system and process start up, application access, authentication and authorization)
- Audit Trail (identity of the user or system that changed the data, the date and time, what data was changed)
- Availability (faults and exceptions, exceeded capacity limit or resource usage, system errors or bugs, connectivity issues, and slow response times)
- Threats (suspicious activities, unauthorized access, invalid parameters or input, failed authentication, failed security verification)
- Events (search queries, product views, likes and favorites, shares, make or cancel an order, viewed a page, how much time a person spent looking at an image, and whether they scrolled to the bottom of a long page, etc.)

*
.image images/yes-discussion-time.jpeg

